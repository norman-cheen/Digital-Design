library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned."+";
use ieee.std_logic_unsigned."-";
use ieee.std_logic_unsigned."=";
--use work.dataConsume_pack.all;
use work.common_pack.all;

entity dataConsume is
	port (
	  clk:		in std_logic;
		reset:		in std_logic; -- synchronous reset
		start: in std_logic; -- goes high to signal data transfer
		numWords_bcd: in BCD_ARRAY_TYPE(2 downto 0);
		ctrlIn: in std_logic;
		ctrlOut: out std_logic;
		data: in std_logic_vector(7 downto 0);
		dataReady: out std_logic;
		byte: out std_logic_vector(7 downto 0);
		seqDone: out std_logic;
		maxIndex: out BCD_ARRAY_TYPE(2 downto 0);
		dataResults: out CHAR_ARRAY_TYPE(0 to RESULT_BYTE_NUM-1) -- index 3 holds the peak
	);
end dataConsume;


ARCHITECTURE bahav of dataConsume is
  
  SIGNAL bcd_counter: BCD_ARRAY_TYPE(2 DOWNTO 0) := ("0000", "0000", "0000");
  SIGNAL array1: CHAR_ARRAY_TYPE(6 DOWNTO 0) := ("00000000","00000000","00000000","00000000","00000000","00000000","00000000");
  SIGNAL array2: CHAR_ARRAY_TYPE(6 DOWNTO 0) := ("00000000","00000000","00000000","00000000","00000000","00000000","00000000");
  
  
  SIGNAL reg_data: std_logic_vector(7 downto 0);
  
  
  SIGNAL bcd_counter_en: std_logic;
  SIGNAL bcd_counter_reset: std_logic;
  SIGNAL shifter_en: std_logic;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
BEGIN
  
  ----------BCD counter----------------------------------------------
  bcd_counter: PROCESS (clk, reset)
    VARIABLE digit1, digit10, digit100 : std_logic_vector(3 DOWNTO 0);
  BEGIN
    IF clk'EVENT AND clk='1' THEN 
      IF reset = '1' or bcd_counter_reset = '1' THEN
        digit1   := "0000";
        digit10  := "0000";
        digit100 := "0000";
        
      ELSIF bcd_counter_en = '1' THEN
        IF digit1 < "1001" THEN        --if count less than 9
          digit1  := digit1 + 1;
        ELSE 
          digit1  := "0000";           --if count >=9, carry out
          digit10 := digit10 + 1;
        END IF;
        
        IF digit10 < "1001" THEN       --if count less than 90
          digit10  := digit10 + 1;
        ELSE 
          digit10  := "0000";          --if count >=90, carry out
          digit100 := digit100 + 1;
        END IF;
      
      END IF;
      
      bcd_counter(0) <= digit1;
      bcd_counter(1) <= digit10;
      bcd_counter(2) <= digit100;
      
    END IF;
      
  END PROCESS;  --counter_bcd
  
  shifter: PROCESS (CLK)
    VARIABLE reg_shift : CHAR_ARRAY_TYPE(6 DOWNTO 0) := ("00000000","00000000","00000000","00000000","00000000","00000000","00000000");
  BEGIN
    IF clk'EVENT AND clk='1' AND shifter_en='1' THEN
      FOR i in 7 downto 1 LOOP
        reg_shift(i) := reg_shift(i-1);
      END LOOP;
      
      reg_shifter(0) := reg_data  
    ELSE NULL;
    END IF;
    
    array1 <= reg_shift
    
  END PROCESS; -- shifter
  
  
  
END; -- end architecture
